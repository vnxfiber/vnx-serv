/* Polyfill Bundle v3.111.0 */
(function() {
    'use strict';
    
    // Array.prototype.forEach polyfill
    if (!Array.prototype.forEach) {
        Array.prototype.forEach = function(callback, thisArg) {
            if (this == null) {
                throw new TypeError('this is null or not defined');
            }
            var O = Object(this);
            var len = O.length >>> 0;
            if (typeof callback !== 'function') {
                throw new TypeError(callback + ' is not a function');
            }
            var T = thisArg;
            var k = 0;
            while (k < len) {
                if (k in O) {
                    callback.call(T, O[k], k, O);
                }
                k++;
            }
        };
    }

    // Element.prototype.classList polyfill
    if (!("classList" in document.documentElement)) {
        Object.defineProperty(Element.prototype, 'classList', {
            get: function() {
                var self = this;
                function update(fn) {
                    return function(value) {
                        var classes = self.className.split(/\s+/);
                        var index = classes.indexOf(value);
                        fn(classes, index, value);
                        self.className = classes.join(" ");
                    };
                }

                return {
                    add: update(function(classes, index, value) {
                        if (!~index) classes.push(value);
                    }),
                    remove: update(function(classes, index) {
                        if (~index) classes.splice(index, 1);
                    }),
                    toggle: update(function(classes, index, value) {
                        if (~index) { classes.splice(index, 1); }
                        else { classes.push(value); }
                    }),
                    contains: function(value) {
                        return !!~self.className.split(/\s+/).indexOf(value);
                    },
                    item: function(i) {
                        return self.className.split(/\s+/)[i] || null;
                    }
                };
            }
        });
    }

    // Event.prototype.preventDefault polyfill
    if (!Event.prototype.preventDefault) {
        Event.prototype.preventDefault = function() {
            this.returnValue = false;
        };
    }

    // NodeList.prototype.forEach polyfill
    if (!NodeList.prototype.forEach) {
        NodeList.prototype.forEach = Array.prototype.forEach;
    }
})(); 